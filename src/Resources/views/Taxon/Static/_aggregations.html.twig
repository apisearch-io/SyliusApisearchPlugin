{% macro printAggregation(
    result,
    aggregationName,
    maxElements
    ) %}
    {% import _self as _aggregations %}
    {% set aggregation = result.aggregation(aggregationName) %}

    {% if aggregation != null and not aggregation|call('isEmpty') %}
        <div class="item">
            <div class="field">
                {{ _aggregations.printTitle(aggregationName) }}
                <div class="ui relaxed divided list">
                    {% for counter in aggregation|call('getCounters')|slice(0, maxElements|default(999)) %}
                        {{ _aggregations.printAggregationOption(
                            result,
                            aggregationName,
                            counter|call('getId')
                        ) }}
                    {% endfor %}
                </div>

                {% if aggregation|call('getActiveElements') is not empty %}
                    <a href="{{ result|remove_filter_value(aggregationName) }}" class="fluid ui red button">
                        {{ "apisearch.ui.remove_selected"|trans }}
                    </a>
                {% endif %}

                {% if aggregation|call('hasLevels') %}
                    {% for activeElement in aggregation|call('getActiveElements') %}
                        <a href="{{ result|remove_filter_value(aggregationName, activeElement|call('getId')) }}"
                           class="fluid ui red button">
                            {{ activeElement|call('getName')|trans }}
                        </a>
                    {% endfor %}
                {% endif %}
            </div>
        </div>
    {% endif %}
{% endmacro printAggregation %}


{% macro printAggregationOption(
    result,
    aggregationName,
    counterId
    ) %}
    {% import _self as _aggregations %}
    {% set aggregation = result.aggregation(aggregationName) %}
    {% set counter = aggregation|call('getCounters')[counterId] %}
    {% if counter is not null %}
        {% set edited_search_query = counter|call('isUsed')
            ? result|remove_filter_value(aggregationName, counterId)
            : result|add_filter_value(aggregationName, counterId) %}
        <div class="item">
            <div class="ui toggle checkbox">
                <a href="{{ edited_search_query }}">
                    {% if not aggregation|call('hasLevels') %}
                        <input type="checkbox"{% if counter|call('isUsed') %} checked{% endif %}
                               onclick='window.location.assign("{{ edited_search_query }}")'>
                    {% endif %}
                    {{ _aggregations.printOptionValue(aggregationName, counter) }}
                </a>
            </div>
        </div>
    {% endif %}
{% endmacro printAggregationOption %}


{% macro printPriceRange(result) %}
    {% import _self as _aggregations %}
    {% set aggregation = result.aggregation('price') %}

    {% if aggregation != null and not aggregation.isEmpty() %}
        {% set result_min_price = 0 %}
        {% set result_max_price = 100 %}
        <div class="item">
            <div class="field">
                {{ _aggregations.printTitle('price') }}
                <div class="ui relaxed divided list">
                    <div class="item">
                        <div class="ui fluid input">
                            <input placeholder="{{ 'apisearch.ui.fields.min_price' | trans }}" type="text" value="{{ result_min_price }}">
                        </div>
                    </div>
                    <div class="item">
                        <div class="ui fluid input">
                            <input placeholder="{{ 'apisearch.ui.fields.max_price' | trans }}" type="text" value="{{ result_max_price }}">
                        </div>
                    </div>
                </div>
                {% if app.request.query.has('price') %}
                    <div>
                        <a href="{{ result|remove_price_range_filter }}" class="fluid ui red button">
                            {{ "apisearch.ui.remove_selected"|trans }}
                        </a>
                    </div>
                {% endif %}

            </div>
        </div>
    {% endif %}

{% endmacro printPriceRange %}


{% macro printTitle(aggregationName) %}
    <label>{{ ('apisearch.ui.fields.'~aggregationName) | trans }}</label>
{% endmacro printTitle %}


{% macro printOptionValue(aggregationName, counter) %}
    <label>{{ aggregationName|trans_option(counter|call('getName')) }} ({{ counter|call('getN') }})</label>
{% endmacro printOptionValue %}
